import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("net.serenity-bdd:serenity-gradle-plugin:1.1.36")
    }
}

ext {
    // The drivers we want to use
    drivers = ["chrome", "phantomJs", "firefox"]
}

// In this section you declare where to find the dependencies of your project
repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

// Apply plugins to add support for ...
apply from: 'gradle/osSpecificDownloads.gradle'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'net.serenity-bdd.aggregator'

dependencies {
    testCompile("net.serenity-bdd:serenity-core:$serenitycoreVersion")
    testCompile("net.serenity-bdd:serenity-junit:$serenityjunitVersion")
    testCompile("junit:junit:$junitVersion")
    testCompile("net.serenity-bdd:serenity-cucumber:$serenitycucumberVersion")
    testCompile("org.assertj:assertj-core:$assertjcoreVersion")
    testCompile("org.slf4j:slf4j-simple:$slf4jsimpleVersion")
    // compile('org.slf4j:slf4j-api:1.7.21')

    // Drivers
    // testCompile "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    // testCompile "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
    // using a custom version of phantomjs driver for now as the original one does not support WebDriver > 2.43.1
    // testCompile("com.codeborne:phantomjsdriver:$phantomjsdriverVersion") {
        // phantomjs driver pulls in a different selenium version
       // transitive = false
    // }
}
gradle.startParameter.continueOnFailure = true

drivers.each { driver ->
    task "${driver}Test"(type: Test) {
        reports {
            html.destination = reporting.file("$name/tests")
            junitXml.destination = file("$buildDir/test-results/$name")
        }

        outputs.upToDateWhen { false }  // Always run tests

        // systemProperty "geb.build.reportsDir", reporting.file("$name/geb")
        // systemProperty "geb.env", driver

        // If you wanted to set the baseUrl in your buildâ€¦
        // systemProperty "geb.build.baseUrl", "http://myapp.com"

        systemProperty 'webdriver.driver', driver
        systemProperty 'tags', System.getProperty('tags', '')
    }
}

chromeTest {
    dependsOn unzipChromeDriver

    def chromedriverFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "chromedriver.exe" : "chromedriver"
    systemProperty "webdriver.chrome.driver", new File(unzipChromeDriver.outputs.files.singleFile, chromedriverFilename).absolutePath
}

phantomJsTest {
    dependsOn unzipPhantomJs

    def phantomJsFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "phantomjs.exe" : "bin/phantomjs"
    systemProperty "phantomjs.binary.path", new File(unzipPhantomJs.outputs.files.singleFile, phantomJsFilename).absolutePath
}

test {
    // dependsOn drivers.collect { tasks["${it}Test"] }
    // only Chrome Tests
    dependsOn drivers.collect { tasks["chromeTest"] }
    enabled = false
    // maxParallelForks = 2
}
